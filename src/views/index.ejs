<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Game </title>
    <style>

        /* Layer 1 bottom */
        body {
            background-color: black;
            margin: 0;
            padding: 0;

            /* Lowest background layer */
            background-image: url('/images/background_starfields/stars_background.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;

            flex-direction: column;
            justify-content: flex-end;

            overflow: hidden;
        }

        /* Layer 2 middle */
        .pinprick-stars {
            position: absolute;
            top: 0;
            left: 0;
            width: 200%;
            height: 200%;
            background-image: url('/images/background_starfields/star_field1.png');
            background-repeat: repeat;
            /*background-size: contain;*/
            z-index: 20;
        }

        /* Layer 3 top */
        .asteroid-field {
            position: absolute;
            top: 0;
            left: 0;
            width: 200%;
            height: 200%;
            background-image: url('/images/asteroid_fields/asteroid_field1.png');
            background-repeat: repeat;
            background-size: 15%; /* Adjust this value to shrink the base image */
            z-index: 50;
        }

        /* Ship planets and main layer. */
        canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 3200px;
            height: 1800px;
            /* may have to hardocde size here?*/
            border: 1px solid black;
            z-index: 70;
        }

        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 3200px;
            height: 1800px;
            /* may have to hardocde size here?*/
            background: transparent;
            cursor: move;
            z-index: 100;
            /*pointer-events: auto; !* Allow pointer events *!*/
        }

        .toolbar {
            width: 14%;
            height: 90%;
            background-color: #add8e6; /* Pale blue background */
            border: 5px solid black; /* Thick black border */
            padding: 10px;
            box-sizing: border-box;
            position: fixed;
            bottom: 10px;
            right: 3%;
            /*display: flex;*/
            justify-content: space-between; /* Adjusted to space-between */
            z-index: 120; /* Ensure it is above other elements */
        }

        .stats {
            /*display: flex;*/
            gap: 20px;
        }

        .stat {
            font-size: 18px;
        }

        .player-info {
            font-size: 22px;
        }

        .star-system-banner {
            position: fixed;
            top: -5px;
            left: 40%;
            /*transform: translateX(-50%);*/
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px 20px;
            border-radius: 10px;
            font-size: 24px;
            font-family: 'Arial', sans-serif;
            text-align: center;
            z-index: 120;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }
    </style>
</head>
<body>

<div class="pinprick-stars" id="pinprick_stars"></div>

<div class="asteroid-field" id="asteroidfield"></div>

<canvas class="canvas" id="gridCanvas" width="3200" height="1800"></canvas>

<div class="overlay" id="overlay"></div>

<script>
  const canvas = document.getElementById('gridCanvas');
  const overlay = document.getElementById('overlay');

  const ctx = canvas.getContext('2d');
  const cellSize = 50;
  const cellHeight = cellSize;
  const cellWidth = cellSize;

  // const gridWidth = 30;
  // const gridHeight = 30;
  const gridWidth = <%= gridWidth %>;
  const gridHeight = <%= gridHeight %>;
  let starSystem;
  let players;
  let units;
  let gridOwners;

  let selectedShipId = null;
  let selectedShip = null;

  let zoom = 1
  const zoomFactor = 1.01
  let initialPinchDistance = null;


  // Render units
  units = <%- JSON.stringify(units) %>;

  // TODO need to save map to file. and load.

  // Draw ship on canvas now, rotate to face target, and path line, and selected yellow circle.
  function drawShip(ctx, ship) {
    // console.log("DEBUG1: drawing unit now at ", col, row, text);

    const x = ship.x * cellSize;
    const y = ship.y * cellSize;
    // console.log("DEBUG2: Unit x y now at ", x, y, text+ " size = ", size);

    // Show owner name.
    ctx.fillStyle = 'white';
    ctx.font = '12px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(ship.playerName, x + cellSize / 2, y - 10);

    // Add a yellow circle around it if it is selected.
    if (ship.id === selectedShipId) {
      ctx.beginPath();
      ctx.arc(x + cellSize / 2 + 10, y + cellSize / 2 + 5, cellSize, 0, 2 * Math.PI);
      ctx.strokeStyle = 'yellow';
      ctx.lineWidth = 3;
      ctx.stroke();
    }

    drawShipPath(ctx, ship, x, y);
    drawShipImage(ctx, ship, x, y);
  }

  function drawShipPath(ctx, ship, x, y) {
    // Draw a tracer line showing movement.
    ship.angle = 0; // DEBUG DEFAULT REMOVE LATER.
    if (ship.gotoX == null) {
      return;
    }

    ctx.beginPath();
    ctx.moveTo(x + cellSize / 2, y + cellSize / 2);
    ctx.lineTo(ship.gotoX * cellSize + cellSize / 2, ship.gotoY * cellSize + cellSize / 2);
    ctx.setLineDash([5, 5]); // Set dashed line pattern
    ctx.strokeStyle = 'grey'; // Set line color to grey
    ctx.lineWidth = 3;
    ctx.stroke();
    ctx.setLineDash([]); // Reset to solid line

    // Set direction angle for ship now.
    const dx = ship.gotoX - ship.x;
    const dy = ship.gotoY - ship.y;
    const angle = Math.atan2(dy, dx);
    ship.angle = angle;
  }

  function drawShipImage(ctx, ship, x, y) {
    // Add in our ship graphic now.
    // todo make multiple ship types usable.
    // TODO make simple method.
    const img = new Image();
    img.src = '/images/ships/' + ship.type + '.png';
    img.onload = function () {
      const imgWidth = 128;
      const imgHeight = 128;

      // Rotate ship to this angle.
      // Save the current context state
      ctx.save();
      ctx.scale(zoom, zoom); // Apply the scale transformation

      // Move the origin to the center of the image
      // ctx.translate(x + imgWidth / 2, y + imgHeight / 2);
      ctx.translate(x + cellSize / 2, y + cellSize / 2);

      // NOTE: Orig ship points SW at start, adjust for that.
      // Rotate the context to the desired angle
      // Add 180 + 45
      // TODO start all ship images pointing to 0
      ctx.rotate(ship.angle + (Math.PI / 8) * 10);

      // Draw the image, offsetting by half the image size to center it
      ctx.drawImage(img, -imgWidth / 2, -imgHeight / 2, imgWidth, imgHeight);

      // Restore the context to its original state
      ctx.restore();
    };
  }


  // Draws our graph paper lines now.
  function drawGrid(ctx, cellSize) {
    const width = canvas.width;
    const height = canvas.height;

    ctx.strokeStyle = 'gray'; // Color of the grid lines
    ctx.lineWidth = 1; // Width of the grid lines
    ctx.font = '12px Arial';
    ctx.fillStyle = 'white';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';

    // Draw vertical lines and numbers
    for (let x = 0; x <= width; x += cellSize) {
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(x, height);
      ctx.stroke();

      for (let y = 0; y <= height; y += cellSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();

        // Draw the cell number
        const col = x / cellSize;
        const row = y / cellSize;
        if (col % 5 === 0 && row % 5 === 0) {
          ctx.fillText(`${col},${row}`, x + cellSize / 2, y + cellSize / 2);
        }
      }
    }
  }

  function drawStar() {
    const centerX = (gridWidth / 2) * cellSize;
    const centerY = (gridHeight / 2) * cellSize;
    const radius = (cellSize * 5) / 2;

    ctx.beginPath();
    ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
    ctx.fillStyle = 'yellow';
    ctx.fill();
    ctx.strokeStyle = 'orange';
    ctx.lineWidth = 5;
    ctx.stroke();
  }

  function drawOrbit(ctx, cellSize, dist) {
    const centerX = (gridWidth / 2) * cellSize;
    const centerY = (gridHeight / 2) * cellSize;
    const radiusX = dist * cellSize;
    const radiusY = (dist * cellSize) * 0.6; // Slightly oval shape

    ctx.beginPath();
    ctx.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, 2 * Math.PI);
    ctx.strokeStyle = 'white';
    ctx.lineWidth = 2;
    ctx.stroke();
  }

  async function fetchUpdates() {
    const response = await fetch('/fetch-updates');
    const updates = await response.json();
    // console.log("DEBUG: updates = ", updates);

    return updates;
  }

  function drawShips(units) {
    units.forEach(unit => {
      drawShip(ctx, unit);
    });
  }

  function updateToolbar() {
    let troopCnt = 0;
    let totalTroops = 0;
    // Init an array for all players
    let troopTotals = [];
    units.forEach(unit => {
      totalTroops++;
      if (unit.playerId === players[0].id) {
        troopCnt++;
      }
      if (!troopTotals[unit.playerId]) { // init if not used.
        troopTotals[unit.playerId] = 0;
      }
      troopTotals[unit.playerId]++;
    });
    console.log("DEBUG: troopTotals = ", troopTotals);
    let enemyTroops = totalTroops - troopCnt;
    document.querySelector('.player-info').textContent = players[0].name;
    document.querySelector('#stat-troops').textContent = `Troops: ${troopCnt}`;
    document.querySelector('#stat-enemy-troops').textContent = `Enemy Troops: ${enemyTroops}`;
    document.querySelector('#stat-map-captured').textContent = `Map Captured: ${players[0].mapCapturePercent}%`;
    const gold = 26; // TEMP.
    document.querySelector('#stat-gold').textContent = `Gold: ${gold}`;
    // Other armies here:
    // Loop over players and display their stats.
    let troopTotalsText = '';
    for (let player of players) {
      if (player.id !== players[0].id) {
        troopTotalsText += `Player ${player.id} Troops: ${troopTotals[player.id]} <br>`;
      }
    }
    document.querySelector('#other-troops').innerHTML = troopTotalsText;
  }

  function findClosestShip(col, row) {
    let closestShip = null;
    let closestDist = 999999;
    units.forEach(unit => {
      // if (unit.type === 'ship') {
      // NOTE: Could get slow here.
      const dist = Math.sqrt((unit.x - col) ** 2 + (unit.y - row) ** 2);
      // console.log("DEBUG: checking nearest dist = ", dist, " and name = ", unit.name);
      if (dist < closestDist) {
        closestDist = dist;
        closestShip = unit;
      }
      // }
    });

    return closestShip;
  }

  // See if nearby, and return the ship.
  function shipClickedOn(col, row) {
    // Find nearest ship and see if close enough to click.
    const clickedShip = findClosestShip(col, row);
    // console.log("DEBUG: clickedShip = ", clickedShip);

    if (clickedShip) {
      const dist = Math.sqrt((clickedShip.x - col) ** 2 + (clickedShip.y - row) ** 2);
      if (dist > 1.5) {
        // console.log("DEBUG: too far away to click ship.");
        return;
      } else {
        console.log("DEBUG: *** Clicked ship is close enough to select. ship = ", clickedShip);
        return clickedShip;
      }
    }
  }

  // Check if an object was clicked at this location.
  // TODO note, there may be overlapping objects later on.
  function checkObjectClickedOn(col, row) {
    // Find nearest star.
    const clickedStar = findClosestStar(col, row);
    if (clickedStar) {
      const dist = Math.sqrt((clickedStar.x - col) ** 2 + (clickedStar.y - row) ** 2);
      // TODO this needs to adjust based on star size????
      if (dist <= 2) {
        // console.log("DEBUG: *** Clicked star is close enough to hit. star = ", clickedStar);
        onClickStar(clickedStar);
        return;
      }
    }

    // Find nearest planet.
    const clickedPlanet = findClosestPlanet(col, row);
    if (clickedPlanet) {
      const dist = Math.sqrt((clickedPlanet.x - col) ** 2 + (clickedPlanet.y - row) ** 2);
      // TODO this needs to adjust based on planet size????
      if (dist <= 1) {
        // console.log("DEBUG: *** Clicked planet is close enough to hit. planet = ", clickedPlanet);
        onClickPlanet(clickedPlanet);
        return;
      }
    }
  }

  // See if we hit near a star. TODO
  function findClosestStar(col, row) {
    let closestStar = null;

    // Check the center x y of grid for the star location.
    const centerX = gridWidth / 2;
    const centerY = gridHeight / 2;
    const dist = Math.sqrt((centerX - col) ** 2 + (centerY - row) ** 2);
    // console.log("DEBUG: dist to star center = ", dist);

    // TODO Need star name and stats and things OBJ.
    const star = {
      name: "Riedel",
      x: centerX,
      y: centerY,
      size: 5,
    };
    // todo return distance on all these also to cut down math calls.
    closestStar = star;

    return closestStar;
  }

  // See if we hit near a planet.
  function findClosestPlanet(col, row) {
    let closestPlanet = null;
    let closestDist = 999999;
    starSystem.planets.forEach(planet => {
      const dist = Math.sqrt((planet.x - col) ** 2 + (planet.y - row) ** 2);
      // console.log(`DEBUG: checking nearest planet ${planet.name} at ${planet.x},${planet.y} and dist = ${dist}`);
      if (dist < closestDist) {
        closestDist = dist;
        closestPlanet = planet;
      }
    });

    return closestPlanet;
  }

  // Actions to trigger on clicking a star
  function onClickStar(star) {
    console.log("DEBUG: Clicked on star = ", star);
    updateToolbarForStar(star);
  }

  // Actions to trigger on clicking a planet
  function onClickPlanet(planet) {
    console.log("DEBUG: Clicked on planet = ", planet);
    updateToolbarForPlanet(planet);
  }

  function updateToolbarForPlanet(planet) {
    const toolbar = document.querySelector('.toolbar');
    toolbar.innerHTML = `
    <div class="planet-info">
      <div class="stat">Planet Name: ${planet.name}</div>
      <div class="stat">Size: ${planet.size}</div>
      <div class="stat">Color: ${planet.color}</div>
      <!-- TODO Add more planet stats here as needed -->

Attack Planet - <br>
Scan Planet for Resources - <br>
Scan Planet for Defenses - <br>
Manage Planet -  <br>
    </div>
  `;

    // TODO show star
    // show owner and species.
    // show resources
    // show missions?
  }

  function updateToolbarForStar(star) {
    // TODO show star stats.
    const toolbar = document.querySelector('.toolbar');
    toolbar.innerHTML = `
    <div class="star-info">
      <div class="stat">Star Name: ${star.name}</div>
        <div class="stat">Size: ${star.size}</div>
        <div class="stat">Color: ${star.color}</div>
        <div class="stat">Planets: cnt </div>
<!--         possibly list all planets here clickable-->

        <!-- Add more star stats here as needed -->
    </div>
    `;
  }


  // Add a listener for clicking on the map or ships or planets.
  // This will allow us to select a ship or planet or something.
  // On Click grid listener.
  overlay.addEventListener('click', function (event) {
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const col = Math.floor(x / (cellSize * zoom));
    const row = Math.floor(y / (cellSize * zoom));

    console.log(`\nClicked map: (${col}, ${row}) `);

    // Now see if any other objects are clicked, like planets, stars or asteroids.
    // Or other ships? enemies.
    checkObjectClickedOn(col, row);
  });

  // START OVERLAY DRAG CODE.
  // And ship drag move code.
  let isDragging = false; // dragging for whole map.
  let isDraggingShip = false;
  let startX, startY;

  overlay.addEventListener('mousedown', (e) => {
    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;

    // See if we are dragging on a ship, then drag it around instead.
    let rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    const col = Math.floor(x / (cellSize * zoom));
    const row = Math.floor(y / (cellSize * zoom));
    const clickedShip = shipClickedOn(col, row);

    if (clickedShip) {
      console.log("DEBUG: dragging ship start = ", clickedShip);
      isDraggingShip = true;
    }

    if (!clickedShip || selectedShipId === clickedShip.id) {
      selectedShipId = null;
      selectedShip = null;
      isDraggingShip = false;
      // todo redraw toolbar
    } else {
      selectedShipId = clickedShip.id;
      selectedShip = clickedShip;
      // todo redraw toolbar
    }
    // TODO cant drag a ship after selecting one, arghhh. bug.

  });

  // Allow dragging of full map here.
  overlay.addEventListener('mousemove', (e) => {
    if (!isDragging && !isDraggingShip) {
      return;
    }

    const dx = e.clientX - startX;
    const dy = e.clientY - startY;
    // console.log(`Dragging: dx = ${dx}, dy = ${dy}`);

    // Perform your movement logic here
    startX = e.clientX;
    startY = e.clientY;


    // Slide ship to new spot if needed.
    // TODO
    if (isDraggingShip) {
      // console.log("DEBUG: dragging ship = ", selectedShipId);

      // Draw a line where path will go.
      return;
    }

    // Slide around asteroid layer.
    const asteroidField = document.getElementById('asteroidfield');
    if (!asteroidField) {
      console.log("ERROR: asteroidField not found.");
      // return;
    }
    let rect = asteroidField.getBoundingClientRect();
    let currentX = rect.left + window.scrollX;
    let currentY = rect.top + window.scrollY;
    asteroidField.style.transform = `translate(${currentX + dx * 0.3}px, ${currentY + dy * 0.3}px)`;


    // Slide around ship layer a lot.
    const gridCanvas = document.getElementById('gridCanvas');
    if (!gridCanvas) {
      console.log("ERROR: gridCanvas not found.");
      // return;
    }
    rect = gridCanvas.getBoundingClientRect();
    currentX = rect.left + window.scrollX;
    currentY = rect.top + window.scrollY;
    gridCanvas.style.transform = `translate(${currentX + dx * 1}px, ${currentY + dy * 1}px)`;

    // Slide around pinpricks layer less.
    const pinprick_stars = document.getElementById('pinprick_stars');
    if (!pinprick_stars) {
      console.log("ERROR: pinprick_stars not found.");
      // return;
    }
    rect = pinprick_stars.getBoundingClientRect();
    currentX = rect.left + window.scrollX;
    currentY = rect.top + window.scrollY;
    pinprick_stars.style.transform = `translate(${currentX + dx * 0.03}px, ${currentY + dy * 0.03}px)`;
  });

  overlay.addEventListener('mouseup', (e) => {
    isDragging = false;

    if (isDraggingShip) {
      isDraggingShip = false;

      // Send ship update to server.
      // console.log("DEBUG: dragged ship  ");
      // New goto location is what.
      let rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      // console.log("DEBUG: dragged ship to x y = ", x, y);
      // todo make var (cellSize * zoom)
      const col = Math.floor(x / (cellSize * zoom));
      const row = Math.floor(y / (cellSize * zoom));
      console.log("DEBUG: dragged ship to col row = ", col, row);

      // Check distance is > 1.5 or ship not really dragged.
      const dist = Math.sqrt((selectedShip.x - (x / (cellSize * zoom))) ** 2 + (selectedShip.y - (y / (cellSize * zoom))) ** 2);
      if (dist < 1) {
        // console.log("DEBUG: dragged ship not far enough to move.");
        return;
      }

      selectedShip.gotoX = col;
      selectedShip.gotoY = row;

      // Pass new value back to server.
      fetch('/ship-new-goto', {
        method: 'post',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          shipId: selectedShip.id,  // Ship ID
          x: col,  // New X
          y: row,  // New Y
        }),
      });
      // TODO make this secure, encrypt or key or such.
    }


    // TODO send ship update to server if moved!

    // Re-enable pointer events
    // overlay.style.pointerEvents = 'auto';
  });

  overlay.addEventListener('mouseleave', () => {
    isDragging = false;
    isDraggingShip = false;

    // Re-enable pointer events
    // overlay.style.pointerEvents = 'auto';
  });
  // END OVERLAY

  // Mouse wheel zooming.  TODO test
  overlay.addEventListener('wheel', (event) => {
    event.preventDefault();
    console.log("DEBUG: wheel zoom event = ", event);

    if (event.deltaY < 0) {
      // Zoom in
      zoom *= zoomFactor;
    } else {
      // Zoom out
      zoom /= zoomFactor;
    }
    console.log("DEBUG: zoom = ", zoom);

    // Bounds limits.
    if (zoom < 0.3) {
      zoom = 0.3;
    } else if (zoom > 2) {
      zoom = 2;
    }

    // Adjust the size of the asteroid field
    // const asteroidField = document.getElementById('asteroidfield');
    // if (asteroidField) {
    //   asteroidField.style.transform = `scale(${zoom})`;
    // }
    // // not centered.
    //
    // // Adjust the size of the pinprick stars
    // const pinprickStars = document.getElementById('pinprick_stars');
    // if (pinprickStars) {
    //   pinprickStars.style.transform = `scale(${zoom})`;  // not working?
    // }

    drawGameMap(starSystem, units);
  });


  // Given star system information and ships information.
  // Clear our canvas and redraw our map now.
  function drawGameMap(starSystem, units) {
    ctx.save(); // Save the current context state

    // TODO make Draw System method instead.
    ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
    // TODO doesnt center on mouse point, and doesnt shrink backgrounds slightly.
    ctx.scale(zoom, zoom); // Apply the scale transformation

    drawStar(); // Draw the star at the center

    // For each planet draw orbits now.
    starSystem.planets.forEach(pl => {
      drawPlanet(pl); // Draw the planet
    });

    // Debug stuffs draw grid.
    // drawGrid(ctx, cellSize);
    // TODO add a hotkey to toggle grid on and off...

    drawShips(units);
    ctx.restore(); // Restore the context state
  }

  // Given our planet object, draw the orbit and planet there.
  function drawPlanet(planet) {
    drawOrbit(ctx, cellSize, planet.radius);

    // Now draw a planet on it.
    const centerX = (gridWidth / 2) * cellSize;
    const centerY = (gridHeight / 2) * cellSize;

    ctx.beginPath();
    // Place the planet on the oval orbit path.
    // 0.6 oval shape in orbit.
    // TODO use image if we have it.
    // todo get angle, place along path on angle.
    // ctx.arc(centerX - planet.radius, centerY, planet.size, 0, 2 * Math.PI);
    const posX = centerX + planet.radius * cellSize;
    const posY = centerY;

    // TEMP STATS
    planet.x = posX / cellSize;
    planet.y = posY / cellSize;
    // TODO move all positions and stuff to server side, to allow movements there?

    ctx.arc(posX, posY, planet.size * 10, 0, 2 * Math.PI);

    ctx.fillStyle = planet.color;
    ctx.fill();
    ctx.strokeStyle = 'black';
    ctx.lineWidth = 2;
    ctx.stroke();

    // Add the planet name.
    ctx.font = '18px Arial';
    ctx.fillStyle = 'white';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(planet.name, posX, posY);
    // TODO move to top of planet?
  }

  async function doUpdates() {
    const updates = await fetchUpdates();
    starSystem = updates.starSystem;
    units = updates.units;
    players = updates.players;
    // gridOwners = updates.gridOwners;

    // TODO change this to only update ships that have changed NOT all of them all the time.

    // const starSystemName = "Alpha Centauri"; // Replace with your dynamic star system name
    document.getElementById('starSystemBanner').textContent = starSystem.name + " Star System";

    // TODO move this out logically.
    drawGameMap(starSystem, units);

    // updateToolbar();
    // console.log("Updated units. ")
  }

  // Get updates from server, every second or so.
  // const gameSpeed = 3;  // TODO not quite right here.
  const gameSpeed = 10;
  setInterval(async () => {
    doUpdates();
  }, 400 * gameSpeed);


  let moveCount = 0;
  const movesPerSecond = 50;
  // Move ships method.
  setInterval(async () => {
    moveCount++;

    // TODO make two methods.
    // Move ships towards their goto location.
    units.forEach(unit => {
      if (unit.gotoX == null) {
        return;
      }

      // Move ship towards goto location.
      const dx = unit.gotoX - unit.x;
      const dy = unit.gotoY - unit.y;
      const dist = Math.sqrt(dx ** 2 + dy ** 2);

      // if arrived stop
      if (dist < 0.1) {
        // console.log("DEBUG: ship arrived at goto location. ");
        unit.gotoX = null;
        unit.gotoY = null;
        return;
      }

      // Move ship closer to target. Note this needs to match server unit speeds.
      unit.x += dx / dist * 0.01;
      unit.y += dy / dist * 0.01;
    });

    // if (moveCount % 100 === 0) {
    //   console.log(`DEBUG: ${moveCount} moved ships. `);
    // }

    // TODO need to double buffer canvas to stop flickering.
    // https://www.google.com/search?num=10&sca_esv=d1299addba882a66&rlz=1C1GCEU_en-GBUS1079US1079&sxsrf=ADLYWIL-IvWVpnZOKqSoEeOKGcs9-qWySA:1735057586421&q=how+to+stop+flicker+on+drawing+canvas+fast+in+js&spell=1&sa=X&ved=2ahUKEwjSwemY6cCKAxUnMNAFHb4TGtcQBSgAegQIDBAB&biw=1536&bih=791&dpr=1.25
    // Redraw whole map.
    drawGameMap(starSystem, units);

  }, 1000 / movesPerSecond); // 60 times a second.


  // Start page.
  doUpdates();
</script>

<div class="star-system-banner" id="starSystemBanner"></div>
<!--todo onclick to show stats.-->

<div class="toolbar">
    <!-- Toolbar content goes here -->
    <div class="player-info">Player Name<br></div>
    <div class="ship-stats">
        <div class="stat" id="stat-troops">Troops: 10<br></div>
        <div class="stat" id="stat-enemy-troops">Enemy Troops: 8<br></div>
        <div class="stat" id="stat-map-captured">Map Captured: 50%<br></div>
        <div class="stat" id="stat-gold">Gold: 100<br></div>
        <div class="stat" id="other-troops">Player 2 Troops: 5<br>Player 3 Troops: 3<br>Player 4 Troops: 2<br></div>
    </div>

    <!--    <img src="/images/aliens/silver_aliens.png" alt="Aliens" style="width: 100%;">-->
</div>

</body>
</html>