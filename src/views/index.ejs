<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Game </title>
    <style>

        /* Layer 1 bottom */
        body {
            background-color: black;
            margin: 0;
            padding: 0;

            /* Lowest background layer */
            background-image: url('/images/background_starfields/stars_background.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;

            flex-direction: column;
            justify-content: flex-end;

            overflow: hidden;
        }

        /* Layer 2 middle */
        .pinprick-stars {
            position: absolute;
            top: 0;
            left: 0;
            width: 200%;
            height: 200%;
            background-image: url('/images/background_starfields/star_field1.png');
            background-repeat: repeat;
            /*background-size: contain;*/
            z-index: 20;
        }

        /* Layer 3 top */
        .asteroid-field {
            position: absolute;
            top: 0;
            left: 0;
            width: 200%;
            height: 200%;
            background-image: url('/images/asteroid_fields/asteroid_field1.png');
            background-repeat: repeat;
            background-size: 15%; /* Adjust this value to shrink the base image */
            z-index: 50;
        }

        /* Ship planets and main layer. */
        canvas {
            position: absolute;
            top: 0;
            left: 0;
            /*width: 100%;*/
            /*height: 100%;*/
            /* may have to hardocde size here?*/
            border: 1px solid black;
            z-index: 70;
        }

        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: transparent;
            cursor: move;
            z-index: 100;
            /*pointer-events: auto; !* Allow pointer events *!*/
        }

        .toolbar {
            width: 14%;
            height: 90%;
            background-color: #add8e6; /* Pale blue background */
            border: 5px solid black; /* Thick black border */
            padding: 10px;
            box-sizing: border-box;
            position: fixed;
            bottom: 10px;
            right: 3%;
            /*display: flex;*/
            justify-content: space-between; /* Adjusted to space-between */
            z-index: 120; /* Ensure it is above other elements */
        }

        .stats {
            /*display: flex;*/
            gap: 20px;
        }

        .stat {
            font-size: 18px;
        }
    </style>
</head>
<body>

<!--<img id="pinprick_stars" src="/images/background_starfields/star_field1.png"-->
<!--     style="position: absolute; top: 0px; left: 0px; width:50%">-->
<div class="pinprick-stars" id="pinprick_stars"></div>

<!--<img id="asteroid_starfield" src="/images/asteroid_fields/asteroid_field1.png" alt="Asteroid Field"-->
<!--     style="position: absolute; top: 0px; left: 0px; width:50%">-->

<div class="asteroid-field" id="asteroidfield"></div>

<canvas class="canvas" id="gridCanvas" width="3200" height="1800"></canvas>

<div class="overlay" id="overlay"></div>

<script>
  const canvas = document.getElementById('gridCanvas');
  const overlay = document.getElementById('overlay');

  const ctx = canvas.getContext('2d');
  const cellSize = 50;
  const cellHeight = cellSize;
  const cellWidth = cellSize;
  // const hexVertDist = cellHeight * 0.5; // Adjust vertical distance
  // const hexHorizDist = cellWidth * 1.5; // Adjust horizontal distance

  // const gridWidth = 30;
  // const gridHeight = 30;
  const gridWidth = <%= gridWidth %>;
  const gridHeight = <%= gridHeight %>;
  let players;
  let units;
  let gridOwners;

  let selectedShipId = null;
  let selectedShip = null;


  // Draw a single unit, based on position.
  // function drawUnit(ctx, type, col, row, size, fillColor, text) {
  function drawShip(ctx, ship) {
    // console.log("DEBUG1: drawing unit now at ", col, row, text);

    const x = ship.x * cellSize;
    const y = ship.y * cellSize;
    // console.log("DEBUG2: Unit x y now at ", x, y, text+ " size = ", size);

    // Add in our ship graphic now.
    // todo make multiple ship types usable.
    const img = new Image();
    // img.src = '/images/ships/ship1.png';
    img.src = '/images/ships/' + ship.type + '.png';
    img.onload = function () {
      ctx.drawImage(img, x - cellSize / 2, y - cellSize / 2, 128, 128);
    };

    ctx.fillStyle = 'white';
    ctx.font = '12px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(ship.playerName, x + cellSize / 2, y);

    // Add a yellow circle around it if it is selected.
    if (ship.id === selectedShipId) {
      ctx.beginPath();
      ctx.arc(x + cellSize / 2 + 10, y + cellSize / 2 + 5, cellSize, 0, 2 * Math.PI);
      ctx.strokeStyle = 'yellow';
      ctx.lineWidth = 3;
      ctx.stroke();
    }

    // Draw a tracer line showing movement.
    if (ship.gotoX && ship.gotoY) {
      ctx.beginPath();
      ctx.moveTo(x + cellSize / 2, y + cellSize / 2);
      ctx.lineTo(ship.gotoX * cellSize + cellSize / 2, ship.gotoY * cellSize + cellSize / 2);
      ctx.strokeStyle = 'white';
      ctx.lineWidth = 3;
      ctx.stroke();
    }
  }

  // Draws our graph paper lines now.
  function drawGrid(ctx, cellSize) {
    const width = canvas.width;
    const height = canvas.height;

    ctx.strokeStyle = 'gray'; // Color of the grid lines
    ctx.lineWidth = 1; // Width of the grid lines
    ctx.font = '12px Arial';
    ctx.fillStyle = 'white';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';

    // Draw vertical lines and numbers
    for (let x = 0; x <= width; x += cellSize) {
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(x, height);
      ctx.stroke();

      for (let y = 0; y <= height; y += cellSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();

        // Draw the cell number
        const col = x / cellSize;
        const row = y / cellSize;
        if (col % 5 === 0 && row % 5 === 0) {
          ctx.fillText(`${col},${row}`, x + cellSize / 2, y + cellSize / 2);
        }
      }
    }
  }


  // Render units
  units = <%- JSON.stringify(units) %>;
  // units.forEach(unit => {
  //   drawUnit(ctx, unit.x, unit.y, hexSize, unit.color, unit.type);
  // });

  // TODO need to save map to file. and load.


  async function fetchUpdates() {
    const response = await fetch('/fetch-updates');
    const updates = await response.json();
    // console.log("DEBUG: updates = ", updates);

    return updates;
  }

  function updateUnits(units) {
    units.forEach(unit => {
      drawShip(ctx, unit);
    });
  }

  function updateToolbar() {
    let troopCnt = 0;
    let totalTroops = 0;
    // Init an array for all players
    let troopTotals = [];
    units.forEach(unit => {
      totalTroops++;
      if (unit.playerId === players[0].id) {
        troopCnt++;
      }
      if (!troopTotals[unit.playerId]) { // init if not used.
        troopTotals[unit.playerId] = 0;
      }
      troopTotals[unit.playerId]++;
    });
    console.log("DEBUG: troopTotals = ", troopTotals);
    let enemyTroops = totalTroops - troopCnt;
    document.querySelector('.player-info').textContent = players[0].name;
    document.querySelector('#stat-troops').textContent = `Troops: ${troopCnt}`;
    document.querySelector('#stat-enemy-troops').textContent = `Enemy Troops: ${enemyTroops}`;
    document.querySelector('#stat-map-captured').textContent = `Map Captured: ${players[0].mapCapturePercent}%`;
    const gold = 26; // TEMP.
    document.querySelector('#stat-gold').textContent = `Gold: ${gold}`;
    // Other armies here:
    // Loop over players and display their stats.
    let troopTotalsText = '';
    for (let player of players) {
      if (player.id !== players[0].id) {
        troopTotalsText += `Player ${player.id} Troops: ${troopTotals[player.id]} <br>`;
      }
    }
    document.querySelector('#other-troops').innerHTML = troopTotalsText;
  }

  function findClosestShip(col, row) {
    let closestShip = null;
    let closestDist = 999999;
    units.forEach(unit => {
      // if (unit.type === 'ship') {
      // NOTE: Could get slow here.
      const dist = Math.sqrt((unit.x - col) ** 2 + (unit.y - row) ** 2);
      // console.log("DEBUG: checking nearest dist = ", dist, " and name = ", unit.name);
      if (dist < closestDist) {
        closestDist = dist;
        closestShip = unit;
      }
      // }
    });

    return closestShip;
  }

  // See if nearby, and return the ship.
  function shipClickedOn(col, row) {
    // Find nearest ship and see if close enough to click.
    const clickedShip = findClosestShip(col, row);
    console.log("DEBUG: clickedShip = ", clickedShip);

    if (clickedShip) {
      const dist = Math.sqrt((clickedShip.x - col) ** 2 + (clickedShip.y - row) ** 2);
      if (dist > 1.5) {
        console.log("DEBUG: too far away to click ship.");
        return;
      } else {
        console.log("DEBUG: *** Clicked ship is close enough to select. ship = ", clickedShip);
        return clickedShip;
      }
    }
  }


  // Add a listener for clicking on the map or ships or planets.
  // This will allow us to select a ship or planet or something.

  // START CHECK CANVAS LISTENERS.
  // canvas.addEventListener('click', (event) => {
  //   const rect = canvas.getBoundingClientRect();
  //   const x = event.clientX - rect.left;
  //   const y = event.clientY - rect.top;
  //
  //   console.log(`Canvas clicked at: (${x}, ${y})`);
  //
  //   // TODO Convert to grid coordinates.
  //
  //   // TODO See if a ship is clicked,
  //
  //   // TODO See if a planet or object is clicked.
  // });
  // END CHECK CANVAS LISTENERS.

  // On Click grid listener.
  overlay.addEventListener('click', function (event) {
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const col = Math.floor(x / cellSize);
    const row = Math.floor(y / cellSize);

    console.log(`\nClicked map: (${col}, ${row}) `);

    // Select or deselect a ship if clicked on.
    const clickedShip = shipClickedOn(col, row);
    // Set selected and redraw with a halo.
    if (!clickedShip || selectedShipId === clickedShip.id) {
      selectedShipId = null;
      selectedShip = null;
      // todo redraw toolbar
    } else {
      selectedShipId = clickedShip.id;
      selectedShip = clickedShip;
      // todo redraw toolbar
    }
    // TODO trigger redraw probably.

  });

  // START OVERLAY DRAG CODE.
  // And ship drag move code.
  let isDragging = false; // dragging for whole map.
  let isDraggingShip = false;
  let startX, startY;

  overlay.addEventListener('mousedown', (e) => {
    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;

    // TODO see if we are on a ship, then drag it around instead.
    let rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const col = Math.floor(x / cellSize);
    const row = Math.floor(y / cellSize);
    const clickedShip = shipClickedOn(col, row);
    if (clickedShip) {
      console.log("DEBUG: dragging ship = ", clickedShip);
      // Move the ship.
      // clickedShip.x += dx / cellSize;
      // clickedShip.y += dy / cellSize;
      // console.log("DEBUG: dragged ship = ", clickedShip);

      selectedShipId = clickedShip.id;
      selectedShip = clickedShip;

      // TODO on drag drop if ship send to server now.

      isDraggingShip = true;
    }

  });

  // Allow dragging of full map here.
  overlay.addEventListener('mousemove', (e) => {
    if (!isDragging && !isDraggingShip) {
      return;
    }

    const dx = e.clientX - startX;
    const dy = e.clientY - startY;
    // console.log(`Dragging: dx = ${dx}, dy = ${dy}`);

    // Perform your movement logic here
    startX = e.clientX;
    startY = e.clientY;


    // Slide ship to new spot if needed.
    // TODO
    if (isDraggingShip) {
      console.log("DEBUG: dragging ship = ", selectedShipId);
      return;
    }

    // Slide around asteroid layer.
    const asteroidField = document.getElementById('asteroidfield');
    if (!asteroidField) {
      console.log("ERROR: asteroidField not found.");
      // return;
    }
    let rect = asteroidField.getBoundingClientRect();
    let currentX = rect.left + window.scrollX;
    let currentY = rect.top + window.scrollY;
    asteroidField.style.transform = `translate(${currentX + dx * 0.3}px, ${currentY + dy * 0.3}px)`;


    // Slide around ship layer a lot.
    const gridCanvas = document.getElementById('gridCanvas');
    if (!gridCanvas) {
      console.log("ERROR: gridCanvas not found.");
      // return;
    }
    rect = gridCanvas.getBoundingClientRect();
    currentX = rect.left + window.scrollX;
    currentY = rect.top + window.scrollY;
    gridCanvas.style.transform = `translate(${currentX + dx * 1}px, ${currentY + dy * 1}px)`;

    // Slide around pinpricks layer less.
    const pinprick_stars = document.getElementById('pinprick_stars');
    if (!pinprick_stars) {
      console.log("ERROR: pinprick_stars not found.");
      // return;
    }
    rect = pinprick_stars.getBoundingClientRect();
    currentX = rect.left + window.scrollX;
    currentY = rect.top + window.scrollY;
    pinprick_stars.style.transform = `translate(${currentX + dx * 0.03}px, ${currentY + dy * 0.03}px)`;
  });

  overlay.addEventListener('mouseup', () => {
    isDragging = false;
    isDraggingShip = false;

    // TODO send ship update to server if moved!

    // Re-enable pointer events
    // overlay.style.pointerEvents = 'auto';
  });

  overlay.addEventListener('mouseleave', () => {
    isDragging = false;
    isDraggingShip = false;

    // Re-enable pointer events
    // overlay.style.pointerEvents = 'auto';
  });
  // END OVERLAY

  const gameSpeed = 3; // seconds
  setInterval(async () => {
    const updates = await fetchUpdates();
    units = updates.units;
    players = updates.players;
    // gridOwners = updates.gridOwners;

    ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas

    // Debug stuffs draw grid.
    drawGrid(ctx, cellSize);

    updateUnits(updates.units);
    // updateToolbar();
    // console.log("Updated units. ")
  }, 400 * gameSpeed);
</script>

<div class="toolbar">
    <!-- Toolbar content goes here -->
    <div class="player-info">Player Name<br></div>
    <div class="stats">
        <div class="stat" id="stat-troops">Troops: 10<br></div>
        <div class="stat" id="stat-enemy-troops">Enemy Troops: 8<br></div>
        <div class="stat" id="stat-map-captured">Map Captured: 50%<br></div>
        <div class="stat" id="stat-gold">Gold: 100<br></div>
        <div class="stat" id="other-troops">Player 2 Troops: 5<br>Player 3 Troops: 3<br>Player 4 Troops: 2<br></div>
    </div>
</div>

</body>
</html>